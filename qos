#!/bin/sh
# QoS(fq_codel) 流量控制脚本

# 配置文件路径
CONFIG_FILE="/etc/config/qos"

# 默认接口
WAN_IF="eth1"

# 读取配置文件
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        . "$CONFIG_FILE"
    else
        # 如果配置文件不存在，询问用户输入
        setup_config
    fi
    
    # 计算实际限速值 - fq_codel 能很好处理缓冲区膨胀，可以设置更接近实际速度
    UPLOAD_KBPS=$((UPLOAD_MBPS * 900))
    DOWNLOAD_KBPS=$((DOWNLOAD_MBPS * 950))
}

# 初始配置设置
setup_config() {
    echo "=========================================="
    echo "            QoS 初始配置向导"
    echo "=========================================="
    echo ""
    
    # 显示当前可用的网络接口
    echo "当前系统可用的网络接口："
    echo "----------------------------------------"
    if command -v ip >/dev/null 2>&1; then
        ip link show | grep -E "^[0-9]+:" | awk -F': ' '{print "  " $2}' | sed 's/@.*//'
    else
        # 备用方法，如果ip命令不可用
        if [ -d "/sys/class/net" ]; then
            for iface in /sys/class/net/*; do
                echo "  $(basename "$iface")"
            done
        else
            echo "  无法自动检测，常见接口名: eth0, eth1, wan, pppoe-wan"
        fi
    fi
    echo "----------------------------------------"
    echo ""
    
    # 询问网络接口
    while true; do
        printf "请输入WAN接口名称 (默认: eth1): "
        read input_interface
        
        # 如果用户直接按回车，使用默认值
        if [ -z "$input_interface" ]; then
            WAN_IF="eth1"
            break
        fi
        
        # 验证接口名称格式（简单验证）
        if echo "$input_interface" | grep -q '^[a-zA-Z][a-zA-Z0-9-]*[0-9]*$'; then
            WAN_IF="$input_interface"
            break
        else
            echo "❌ 请输入有效的接口名称"
        fi
    done
    
    echo ""
    echo "推荐应用优化的网络内核参数来改善游戏体验："
    echo "----------------------------------------"
    echo "• 启用 BBR 拥塞控制算法"
    echo "• 优化 TCP 缓冲区大小"
    echo "• 减少网络延迟和抖动"
    echo "• 提升游戏连接稳定性"
    echo "----------------------------------------"
    echo ""
    
    # 询问是否应用sysctl优化
    while true; do
        printf "是否应用推荐的网络内核优化参数? (y/n): "
        read apply_sysctl
        case "$apply_sysctl" in
            [Yy]|[Yy][Ee][Ss])
                APPLY_SYSCTL="yes"
                break
                ;;
            [Nn]|[Nn][Oo])
                APPLY_SYSCTL="no"
                break
                ;;
            *)
                echo "请输入 y 或 n"
                ;;
        esac
    done
    
    echo ""
    echo "请输入您的网络连接实际速度："
    echo ""
    
    # 询问上传速度
    while true; do
        printf "请输入实际上传速度 (单位: Mbps): "
        read UPLOAD_MBPS
        
        # 验证输入是否为数字
        if echo "$UPLOAD_MBPS" | grep -q '^[0-9]\+$' && [ "$UPLOAD_MBPS" -gt 0 ]; then
            break
        else
            echo "❌ 请输入有效的数字 (大于0)"
        fi
    done
    
    # 询问下载速度
    while true; do
        printf "请输入实际下载速度 (单位: Mbps): "
        read DOWNLOAD_MBPS
        
        # 验证输入是否为数字
        if echo "$DOWNLOAD_MBPS" | grep -q '^[0-9]\+$' && [ "$DOWNLOAD_MBPS" -gt 0 ]; then
            break
        else
            echo "❌ 请输入有效的数字 (大于0)"
        fi
    done
    
    # 确认配置
    echo ""
    echo "配置确认："
    echo "  网络接口: ${WAN_IF}"
    echo "  上传速度: ${UPLOAD_MBPS} Mbps"
    echo "  下载速度: ${DOWNLOAD_MBPS} Mbps"
    echo "  QoS限速: 上传 $((UPLOAD_MBPS * 900)) Kbps / 下载 $((DOWNLOAD_MBPS * 950)) Kbps"
    if [ "$APPLY_SYSCTL" = "yes" ]; then
        echo "  内核优化: ✅ 将应用推荐参数"
    else
        echo "  内核优化: ❌ 跳过优化参数"
    fi
    echo ""
    
    while true; do
        printf "确认保存此配置? (y/n): "
        read confirm
        case "$confirm" in
            [Yy]|[Yy][Ee][Ss])
                save_config
                echo "✅ 配置已保存到 $CONFIG_FILE"
                
                # 应用sysctl优化
                if [ "$APPLY_SYSCTL" = "yes" ]; then
                    apply_sysctl_optimizations
                fi
                break
                ;;
            [Nn]|[Nn][Oo])
                echo "配置已取消，请重新运行脚本"
                exit 0
                ;;
            *)
                echo "请输入 y 或 n"
                ;;
        esac
    done
}

# 保存配置到文件
save_config() {
    # 确保目录存在
    mkdir -p "$(dirname "$CONFIG_FILE")"
    
    # 写入配置文件
    cat > "$CONFIG_FILE" << EOF
# QoS 配置文件
# 由 qos 脚本自动生成于 $(date)

# 网络接口
WAN_IF="$WAN_IF"

# 实际网络速度 (Mbps)
UPLOAD_MBPS=$UPLOAD_MBPS
DOWNLOAD_MBPS=$DOWNLOAD_MBPS

# sysctl优化选项
APPLY_SYSCTL="$APPLY_SYSCTL"

# 配置创建时间
CONFIG_CREATED="$(date)"
EOF
    
    chmod 644 "$CONFIG_FILE"
}

# 应用sysctl网络优化参数
apply_sysctl_optimizations() {
    echo ""
    echo "正在应用网络内核优化参数..."
    
    # 备份并清理现有sysctl配置
    if [ -f "/etc/sysctl.conf" ]; then
        echo "备份现有 /etc/sysctl.conf 到 /etc/sysctl.conf.bak.$(date +%Y%m%d_%H%M%S)"
        cp /etc/sysctl.conf "/etc/sysctl.conf.bak.$(date +%Y%m%d_%H%M%S)" 2>/dev/null
        rm -f /etc/sysctl.conf
    fi
    
    if [ -d "/etc/sysctl.d" ]; then
        echo "备份并清理 /etc/sysctl.d/ 目录"
        if ls /etc/sysctl.d/*.conf >/dev/null 2>&1; then
            mkdir -p "/tmp/sysctl.d.bak.$(date +%Y%m%d_%H%M%S)"
            cp /etc/sysctl.d/*.conf "/tmp/sysctl.d.bak.$(date +%Y%m%d_%H%M%S)/" 2>/dev/null
        fi
        rm -rf /etc/sysctl.d
        mkdir -p /etc/sysctl.d
    else
        mkdir -p /etc/sysctl.d
    fi
    
    # 创建优化的sysctl配置
    cat > /etc/sysctl.d/99-qos-optimizations.conf << 'EOF'
# 默认队列算法和拥塞控制
net.core.default_qdisc = fq_codel
net.ipv4.tcp_congestion_control = bbr

# TCP缓冲区优化 - 游戏低延迟
net.ipv4.tcp_rmem = 8192 131072 16777216
net.ipv4.tcp_wmem = 4096 65535 16777216
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216

# TCP窗口优化
net.ipv4.tcp_shrink_window = 1
net.ipv4.tcp_adv_win_scale = 1

# 端口范围和连接优化
net.ipv4.ip_local_port_range = 1024 65535
net.core.somaxconn = 4096
net.core.netdev_max_backlog = 4096
net.ipv4.tcp_max_tw_buckets = 32768

# TCP连接行为优化
net.ipv4.tcp_abort_on_overflow = 1
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_syncookies = 1

# SYN处理优化
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 3
net.ipv4.tcp_max_syn_backlog = 4096

# 连接超时优化
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_intvl = 3
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_time = 600

# 重传和错误恢复
net.ipv4.tcp_retries1 = 3
net.ipv4.tcp_retries2 = 5
net.ipv4.tcp_frto = 2
net.ipv4.tcp_no_metrics_save = 1

# 转发和BBR调整
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding = 1
net.ipv4.tcp_pacing_ca_ratio = 110

# 文件系统优化
fs.file-max = 104857600
fs.inotify.max_user_instances = 8192
fs.nr_open = 1048576
EOF
    
    # 应用配置
    echo "应用sysctl配置..."
    sysctl -p /etc/sysctl.d/99-qos-optimizations.conf >/dev/null 2>&1
    
    # 验证关键参数
    echo "验证关键优化参数："
    
    # 检查BBR
    current_cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)
    if [ "$current_cc" = "bbr" ]; then
        echo "  ✅ BBR拥塞控制: 已启用"
    else
        echo "  ⚠️  BBR拥塞控制: 可能需要内核支持"
    fi
    
    # 检查fq_codel
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)
    if [ "$current_qdisc" = "fq_codel" ]; then
        echo "  ✅ fq_codel队列: 已启用"
    else
        echo "  ⚠️  fq_codel队列: 设置完成"
    fi
    
    # 检查转发
    ipv4_forward=$(sysctl -n net.ipv4.ip_forward 2>/dev/null)
    if [ "$ipv4_forward" = "1" ]; then
        echo "  ✅ IPv4转发: 已启用"
    else
        echo "  ⚠️  IPv4转发: 需要手动启用"
    fi
    
    echo ""
    echo "✅ 网络优化参数已应用到 /etc/sysctl.d/99-qos-optimizations.conf"
    echo "   参数将在下次重启后永久生效"
}

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 启用QoS功能
start_qos() {
    # 加载配置
    load_config
    
    # 检查接口是否存在
    if ! ip link show "$WAN_IF" >/dev/null 2>&1; then
        echo "❌ 错误: 网络接口 '$WAN_IF' 不存在"
        echo ""
        echo "当前可用的网络接口："
        ip link show | grep -E "^[0-9]+:" | awk -F': ' '{print "  " $2}' | sed 's/@.*//'
        echo ""
        echo "请使用 '$0 reconfig' 重新配置正确的接口"
        exit 1
    fi
    
    echo "启用fq_codel QoS: $WAN_IF 上传${UPLOAD_KBPS}kbps 下载${DOWNLOAD_KBPS}kbps"

    # 清理现有配置
    tc qdisc del dev $WAN_IF root 2>/dev/null
    tc qdisc del dev $WAN_IF ingress 2>/dev/null
    tc qdisc del dev ifb0 root 2>/dev/null
    ip link del ifb0 2>/dev/null

    # 配置上传队列 - 低延迟游戏优化
    tc qdisc add dev $WAN_IF root handle 1: tbf rate ${UPLOAD_KBPS}kbit latency 80ms burst 40k
    tc qdisc add dev $WAN_IF parent 1: fq_codel target 2ms interval 50ms flows 1024 quantum 300 ecn

    # 配置下载队列 - 游戏优先低延迟
    modprobe ifb
    ip link add name ifb0 type ifb 2>/dev/null
    ip link set dev ifb0 up
    tc qdisc add dev $WAN_IF ingress
    tc filter add dev $WAN_IF parent ffff: protocol all u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb0
    tc qdisc add dev ifb0 root handle 1: tbf rate ${DOWNLOAD_KBPS}kbit latency 80ms burst 50k
    tc qdisc add dev ifb0 parent 1: fq_codel target 2ms interval 50ms flows 1024 quantum 300 ecn

    echo "QoS配置完成"
}

# 停止QoS功能
stop_qos() {
    # 加载配置以获取正确的接口名
    if [ -f "$CONFIG_FILE" ]; then
        . "$CONFIG_FILE"
    fi
    
    echo "正在停止QoS..."
    tc qdisc del dev $WAN_IF root 2>/dev/null
    tc qdisc del dev $WAN_IF ingress 2>/dev/null
    tc qdisc del dev ifb0 root 2>/dev/null
    ip link del ifb0 2>/dev/null
    echo "QoS已停止"
}

# 重置统计数据
reset_stats() {
    # 加载配置
    load_config
    
    echo "正在重置QoS统计数据..."
    
    # 保存当前配置参数
    local upload_rate=$(tc qdisc show dev $WAN_IF | grep "qdisc tbf" | grep -o "rate [^ ]*" | cut -d' ' -f2)
    local download_rate=""
    
    if ip link show ifb0 >/dev/null 2>&1; then
        download_rate=$(tc qdisc show dev ifb0 | grep "qdisc tbf" | grep -o "rate [^ ]*" | cut -d' ' -f2)
    fi
    
    # 如果有配置，则重新应用以清除统计
    if [ -n "$upload_rate" ] && [ -n "$download_rate" ]; then
        echo "检测到现有配置，重新应用以清除统计数据..."
        stop_qos
        sleep 1
        start_qos
        echo "统计数据已重置"
    else
        echo "未检测到QoS配置，无需重置"
    fi
}

# 清屏函数
clear_screen() {
    printf '\033[2J\033[H'
}

# 格式化字节数
format_bytes() {
    local bytes=$1
    if [ $bytes -gt 1073741824 ]; then
        printf "%.2fGB" $(echo "scale=2; $bytes/1073741824" | bc)
    elif [ $bytes -gt 1048576 ]; then
        printf "%.2fMB" $(echo "scale=2; $bytes/1048576" | bc)
    elif [ $bytes -gt 1024 ]; then
        printf "%.2fKB" $(echo "scale=2; $bytes/1024" | bc)
    else
        printf "%dB" $bytes
    fi
}

# 格式化速率
format_rate() {
    local rate=$1
    if echo "$rate" | grep -q "Mbit"; then
        echo "$rate" | sed 's/Mbit/Mbps/'
    elif echo "$rate" | grep -q "Kbit"; then
        echo "$rate" | sed 's/Kbit/Kbps/'
    else
        echo "$rate"
    fi
}

# 判断状态颜色
get_status_color() {
    local dropped=$1
    local overlimits=$2
    local backlog=$3
    
    if [ $dropped -gt 1000 ] || [ $overlimits -gt 10000 ] || [ $backlog -gt 50000 ]; then
        echo "$RED"
    elif [ $dropped -gt 100 ] || [ $overlimits -gt 1000 ] || [ $backlog -gt 10000 ]; then
        echo "$YELLOW"
    else
        echo "$GREEN"
    fi
}

# 获取游戏队列统计信息
get_game_queue_stats() {
    local interface=$1
    local direction=$2
    
    # 获取FQ_CODEL游戏队列统计
    local fq_stats=$(tc -s qdisc show dev $interface | grep -A 5 "qdisc fq_codel")
    local tbf_stats=$(tc -s qdisc show dev $interface | grep -A 3 "qdisc tbf")
    
    if [ -z "$fq_stats" ]; then
        echo "${RED}未找到 $direction fq_codel队列配置${NC}"
        return
    fi
    
    # 提取关键游戏数据
    local rate=$(echo "$tbf_stats" | grep "qdisc tbf" | grep -o "rate [^ ]*" | cut -d' ' -f2)
    local sent_bytes=$(echo "$fq_stats" | grep "Sent" | grep -o "Sent [0-9]*" | cut -d' ' -f2)
    local dropped=$(echo "$fq_stats" | grep "dropped" | grep -o "dropped [0-9]*" | cut -d' ' -f2)
    local old_flows=$(echo "$fq_stats" | grep "old_flows" | grep -o "old_flows [0-9]*" | cut -d' ' -f2)
    local new_flows=$(echo "$fq_stats" | grep "new_flows" | grep -o "new_flows [0-9]*" | cut -d' ' -f2)
    
    # 默认值处理
    [ -z "$dropped" ] && dropped=0
    [ -z "$old_flows" ] && old_flows=0
    [ -z "$new_flows" ] && new_flows=0
    
    # 游戏性能状态判断
    local game_status=""
    local status_color=""
    
    if [ "$direction" = "上传" ]; then
        if [ $dropped -gt 50 ]; then
            game_status="❌ 可能卡顿"
            status_color="$RED"
        elif [ $dropped -gt 10 ]; then
            game_status="⚠️  偶有延迟"
            status_color="$YELLOW"
        else
            game_status="✅ 流畅"
            status_color="$GREEN"
        fi
    else
        if [ $dropped -gt 100 ]; then
            game_status="❌ 下载影响游戏"
            status_color="$RED"
        elif [ $dropped -gt 20 ]; then
            game_status="⚠️  轻微影响"
            status_color="$YELLOW"
        else
            game_status="✅ 流畅"
            status_color="$GREEN"
        fi
    fi
    
    printf "${BLUE}══════════════════════════════════════════════════════════════${NC}\n"
    printf "${BLUE}  🎮 %s游戏队列${NC}\n" "$direction"
    printf "${BLUE}══════════════════════════════════════════════════════════════${NC}\n"
    printf "  带宽: ${YELLOW}%s${NC} | 总流量: ${GREEN}%s${NC}\n" "$(format_rate $rate)" "$(format_bytes $sent_bytes)"
    printf "  ${GREEN}活跃%s/1024流${NC} | ${CYAN}新流%s${NC} | 丢包: ${RED}%s${NC}\n" "$old_flows" "$new_flows" "$dropped"
    printf "  游戏状态: ${status_color}%s${NC}\n" "$game_status"
    printf "\n"
}

# 游戏队列监控循环
main_monitor() {
    # 加载配置以获取正确的接口名
    if [ -f "$CONFIG_FILE" ]; then
        . "$CONFIG_FILE"
    fi
    
    # 检查是否需要重置统计数据
    if [ "$2" = "reset" ] || [ "$2" = "clean" ]; then
        echo "准备开始游戏队列监控，正在重置统计数据..."
        reset_stats
        sleep 2
    else
        echo "🎮 启动游戏队列监控..."
        sleep 1
    fi
    
    while true; do
        clear_screen
        
        printf "${GREEN}╔═══════════════════════════════════════════════════════════════╗${NC}\n"
        printf "${GREEN}║                   🎮 游戏队列监控                             ║${NC}\n"
        printf "${GREEN}║                   $(date '+%Y-%m-%d %H:%M:%S')                  ║${NC}\n"
        printf "${GREEN}╚═══════════════════════════════════════════════════════════════╝${NC}\n\n"
        
        # 检查QoS是否启用
        if ! tc qdisc show dev $WAN_IF | grep -q "qdisc fq_codel"; then
            printf "${RED}❌ 游戏队列未启用${NC}\n"
            printf "${YELLOW}请先运行 $0 start 启用QoS${NC}\n"
            exit 1
        fi
        
        # 显示游戏队列统计
        get_game_queue_stats $WAN_IF "上传"
        
        if ip link show ifb0 >/dev/null 2>&1; then
            get_game_queue_stats ifb0 "下载"
        else
            printf "${RED}❌ 下载游戏队列未配置${NC}\n\n"
        fi
        
        # 显示简单提示
        printf "${BLUE}════════════════════════════════════════════════════════════════${NC}\n"
        printf "  ${GREEN}✅ 流畅${NC} | ${YELLOW}⚠️ 偶有延迟${NC} | ${RED}❌ 可能卡顿${NC}\n"
        printf "  ${YELLOW}按 Ctrl+C 退出监控${NC}\n"
        
        sleep 3
    done
}

# 重新配置网络速度
reconfig_speed() {
    echo "=========================================="
    echo "        重新配置QoS参数"
    echo "=========================================="
    echo ""
    
    # 显示当前配置
    if [ -f "$CONFIG_FILE" ]; then
        load_config
        echo "当前配置："
        echo "  网络接口: ${WAN_IF}"
        echo "  上传速度: ${UPLOAD_MBPS} Mbps"
        echo "  下载速度: ${DOWNLOAD_MBPS} Mbps"
        echo ""
    fi
    
    setup_config
    
    # 如果QoS正在运行，重启以应用新配置
    if tc qdisc show dev $WAN_IF | grep -q "qdisc tbf"; then
        echo ""
        echo "检测到QoS正在运行，正在重启以应用新配置..."
        stop_qos
        sleep 1
        start_qos
    fi
}

# 显示当前配置
show_config() {
    if [ -f "$CONFIG_FILE" ]; then
        load_config
        echo "=========================================="
        echo "        当前QoS配置"
        echo "=========================================="
        echo "配置文件: $CONFIG_FILE"
        echo "网络接口: $WAN_IF"
        echo "上传速度: ${UPLOAD_MBPS} Mbps (限速: ${UPLOAD_KBPS} Kbps)"
        echo "下载速度: ${DOWNLOAD_MBPS} Mbps (限速: ${DOWNLOAD_KBPS} Kbps)"
        if [ "$APPLY_SYSCTL" = "yes" ]; then
            echo "内核优化: ✅ 已应用"
        else
            echo "内核优化: ❌ 未应用"
        fi
        if [ -n "$CONFIG_CREATED" ]; then
            echo "创建时间: $CONFIG_CREATED"
        fi
        echo "=========================================="
    else
        echo "❌ 配置文件不存在: $CONFIG_FILE"
        echo "请先运行 '$0 start' 进行初始配置"
    fi
}

# 显示帮助信息
show_help() {
    echo "OpenWrt fq_codel QoS 游戏优化脚本"
    echo ""
    echo "用法: $0 [命令]"
    echo ""
    echo "基本命令:"
    echo "  start        - 启用QoS（首次运行会配置向导）"
    echo "  stop         - 停止QoS"
    echo "  restart      - 重启QoS"
    echo ""
    echo "🎮 游戏监控:"
    echo "  monitor      - 游戏队列实时监控"
    echo "  monitor reset- 重置数据后监控"
    echo ""
    echo "配置管理:"
    echo "  config       - 显示当前配置"
    echo "  reconfig     - 重新配置网速和接口"
    echo "  reset        - 重置统计数据"
    echo "  sysctl       - 应用网络内核优化参数"
    echo ""
    echo "示例:"
    echo "  $0 start     - 启用游戏优化QoS"
    echo "  $0 monitor   - 🎮 实时监控游戏队列"
}

# 参数处理
case "$1" in
    "start")
        start_qos
        echo ""
        echo "🎮 游戏优化命令:"
        echo "  游戏队列监控: $0 monitor"
        echo "  停止QoS:      $0 stop"
        echo "  查看配置:     $0 config"
        ;;
    "stop")
        stop_qos
        ;;
    "restart")
        stop_qos
        echo "等待1秒..."
        sleep 1
        start_qos
        ;;
    "monitor")
        main_monitor "$@"
        ;;
    "reset")
        reset_stats
        ;;
    "config")
        show_config
        ;;
    "reconfig")
        reconfig_speed
        ;;
    "sysctl")
        echo "正在应用推荐的网络内核优化参数..."
        APPLY_SYSCTL="yes"
        apply_sysctl_optimizations
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    "")
        # 默认显示帮助信息
        show_help
        ;;
    *)
        echo "未知命令: $1"
        echo "使用 '$0 help' 查看帮助信息"
        exit 1
        ;;
esac
