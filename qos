#!/bin/sh
# QoS(fq_codel) 流量控制脚本

# 配置文件路径
CONFIG_FILE="/etc/config/qos"

# 默认接口
WAN_IF="eth1"

# 读取配置文件
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        . "$CONFIG_FILE"
    else
        # 如果配置文件不存在，询问用户输入
        setup_config
    fi
    
    # 计算实际限速值 - fq_codel 能很好处理缓冲区膨胀，可以设置更接近实际速度
    UPLOAD_KBPS=$((UPLOAD_MBPS * 900))
    DOWNLOAD_KBPS=$((DOWNLOAD_MBPS * 950))
}

# 初始配置设置
setup_config() {
    print_header "QoS 初始配置向导"
    
    print_section "当前系统可用的网络接口"
    detect_interfaces
    echo ""
    
    # 询问网络接口
    while true; do
        printf "请输入WAN接口名称 (默认: eth1): "
        read input_interface
        
        if [ -z "$input_interface" ]; then
            WAN_IF="eth1"
            break
        elif validate_interface "$input_interface"; then
            WAN_IF="$input_interface"
            break
        else
            print_status "error" "请输入有效的接口名称"
        fi
    done
    
    echo ""
    print_section "网络内核优化推荐"
    print_status "info" "启用 BBR 拥塞控制算法"
    print_status "info" "优化 TCP 缓冲区大小"
    print_status "info" "减少网络延迟和抖动"
    print_status "info" "提升游戏连接稳定性"
    echo ""
    
    # 询问是否应用sysctl优化
    if ask_yes_no "是否应用推荐的网络内核优化参数?" "y"; then
        APPLY_SYSCTL="yes"
    else
        APPLY_SYSCTL="no"
    fi
    
    echo ""
    print_section "网络速度配置"
    
    # 询问上传速度
    while true; do
        printf "请输入实际上传速度 (单位: Mbps): "
        read UPLOAD_MBPS
        
        if validate_number "$UPLOAD_MBPS"; then
            break
        else
            print_status "error" "请输入有效的数字 (大于0)"
        fi
    done
    
    # 询问下载速度
    while true; do
        printf "请输入实际下载速度 (单位: Mbps): "
        read DOWNLOAD_MBPS
        
        if validate_number "$DOWNLOAD_MBPS"; then
            break
        else
            print_status "error" "请输入有效的数字 (大于0)"
        fi
    done
    
    # 确认配置
    echo ""
    print_section "配置确认"
    printf "  网络接口: ${CYAN}%s${NC}\n" "$WAN_IF"
    printf "  上传速度: ${CYAN}%s Mbps${NC}\n" "$UPLOAD_MBPS"
    printf "  下载速度: ${CYAN}%s Mbps${NC}\n" "$DOWNLOAD_MBPS"
    printf "  QoS限速: 上传 ${YELLOW}%s Kbps${NC} / 下载 ${YELLOW}%s Kbps${NC}\n" "$((UPLOAD_MBPS * 900))" "$((DOWNLOAD_MBPS * 950))"
    
    if [ "$APPLY_SYSCTL" = "yes" ]; then
        print_status "success" "将应用推荐的内核优化参数"
    else
        print_status "warning" "跳过内核优化参数"
    fi
    echo ""
    
    if ask_yes_no "确认保存此配置?"; then
        save_config
        print_status "success" "配置已保存到 $CONFIG_FILE"
        
        if [ "$APPLY_SYSCTL" = "yes" ]; then
            apply_sysctl_optimizations
        fi
    else
        print_status "error" "配置已取消，请重新运行脚本"
        exit 0
    fi
}

# 保存配置到文件
save_config() {
    # 确保目录存在
    mkdir -p "$(dirname "$CONFIG_FILE")"
    
    # 写入配置文件
    cat > "$CONFIG_FILE" << EOF
# QoS 配置文件
# 由 qos 脚本自动生成于 $(date)

# 网络接口
WAN_IF="$WAN_IF"

# 实际网络速度 (Mbps)
UPLOAD_MBPS=$UPLOAD_MBPS
DOWNLOAD_MBPS=$DOWNLOAD_MBPS

# sysctl优化选项
APPLY_SYSCTL="$APPLY_SYSCTL"

# 配置创建时间
CONFIG_CREATED="$(date)"
EOF
    
    chmod 644 "$CONFIG_FILE"
}

# 应用sysctl网络优化参数
apply_sysctl_optimizations() {
    echo ""
    print_status "info" "正在应用网络内核优化参数..."
    
    # 备份并清理现有sysctl配置
    if [ -f "/etc/sysctl.conf" ]; then
        backup_file="/etc/sysctl.conf.bak.$(date +%Y%m%d_%H%M%S)"
        print_status "info" "备份现有 /etc/sysctl.conf 到 $backup_file"
        cp /etc/sysctl.conf "$backup_file" 2>/dev/null
        rm -f /etc/sysctl.conf
    fi
    
    if [ -d "/etc/sysctl.d" ]; then
        if ls /etc/sysctl.d/*.conf >/dev/null 2>&1; then
            backup_dir="/tmp/sysctl.d.bak.$(date +%Y%m%d_%H%M%S)"
            print_status "info" "备份现有配置到 $backup_dir"
            mkdir -p "$backup_dir"
            cp /etc/sysctl.d/*.conf "$backup_dir/" 2>/dev/null
        fi
        rm -rf /etc/sysctl.d
        mkdir -p /etc/sysctl.d
    else
        mkdir -p /etc/sysctl.d
    fi
    
    # 创建优化的sysctl配置
    cat > /etc/sysctl.d/99-qos-optimizations.conf << 'EOF'
# 默认队列算法和拥塞控制
net.core.default_qdisc = fq_codel
net.ipv4.tcp_congestion_control = bbr

# TCP缓冲区优化 - 游戏低延迟
net.ipv4.tcp_rmem = 8192 131072 16777216
net.ipv4.tcp_wmem = 4096 65535 16777216
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216

# TCP窗口优化
net.ipv4.tcp_shrink_window = 1
net.ipv4.tcp_adv_win_scale = 1

# 端口范围和连接优化
net.ipv4.ip_local_port_range = 1024 65535
net.core.somaxconn = 4096
net.core.netdev_max_backlog = 4096
net.ipv4.tcp_max_tw_buckets = 32768

# TCP连接行为优化
net.ipv4.tcp_abort_on_overflow = 1
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_syncookies = 1

# SYN处理优化
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 3
net.ipv4.tcp_max_syn_backlog = 4096

# 连接超时优化
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_intvl = 3
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_time = 600

# 重传和错误恢复
net.ipv4.tcp_retries1 = 3
net.ipv4.tcp_retries2 = 5
net.ipv4.tcp_frto = 2
net.ipv4.tcp_no_metrics_save = 1

# 转发和BBR调整
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding = 1
net.ipv4.tcp_pacing_ca_ratio = 110

# 文件系统优化
fs.file-max = 104857600
fs.inotify.max_user_instances = 8192
fs.nr_open = 1048576
EOF
    
    # 应用配置
    print_status "info" "应用sysctl配置..."
    sysctl -p /etc/sysctl.d/99-qos-optimizations.conf >/dev/null 2>&1
    
    # 验证关键参数
    echo ""
    print_section "验证关键优化参数"
    
    # 检查BBR
    current_cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)
    if [ "$current_cc" = "bbr" ]; then
        print_status "success" "BBR拥塞控制已启用"
    else
        print_status "warning" "BBR拥塞控制可能需要内核支持"
    fi
    
    # 检查fq_codel
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)
    if [ "$current_qdisc" = "fq_codel" ]; then
        print_status "success" "fq_codel队列已启用"
    else
        print_status "warning" "fq_codel队列设置完成"
    fi
    
    # 检查转发
    ipv4_forward=$(sysctl -n net.ipv4.ip_forward 2>/dev/null)
    if [ "$ipv4_forward" = "1" ]; then
        print_status "success" "IPv4转发已启用"
    else
        print_status "warning" "IPv4转发需要手动启用"
    fi
    
    echo ""
    print_status "success" "网络优化参数已应用到 /etc/sysctl.d/99-qos-optimizations.conf"
    print_status "info" "参数将在下次重启后永久生效"
}

# 颜色和UI定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# UI辅助函数
print_header() {
    printf "${GREEN}${BOLD}╔══════════════════════════════════════════════════════════════╗${NC}\n"
    printf "${GREEN}${BOLD}║ %-60s ║${NC}\n" "$1"
    printf "${GREEN}${BOLD}╚══════════════════════════════════════════════════════════════╝${NC}\n"
    echo ""
}

print_section() {
    printf "${PURPLE}══════════════════════════════════════════════════════════════${NC}\n"
    printf "${PURPLE}  %s${NC}\n" "$1"
    printf "${PURPLE}══════════════════════════════════════════════════════════════${NC}\n"
}

print_status() {
    local status=$1
    local message=$2
    case "$status" in
        "success") printf "  ${GREEN}✅ %s${NC}\n" "$message" ;;
        "warning") printf "  ${YELLOW}⚠️  %s${NC}\n" "$message" ;;
        "error")   printf "  ${RED}❌ %s${NC}\n" "$message" ;;
        "info")    printf "  ${PURPLE}ℹ️  %s${NC}\n" "$message" ;;
    esac
}

# 统一的接口检测函数
detect_interfaces() {
    if command -v ip >/dev/null 2>&1; then
        ip link show | grep -E "^[0-9]+:" | awk -F': ' '{print "  " $2}' | sed 's/@.*//'
    elif [ -d "/sys/class/net" ]; then
        for iface in /sys/class/net/*; do
            echo "  $(basename "$iface")"
        done
    else
        echo "  无法自动检测，常见接口名: eth0, eth1, wan, pppoe-wan"
    fi
}

# 输入验证函数
validate_number() {
    local input=$1
    local min=${2:-1}
    echo "$input" | grep -q '^[0-9]\+$' && [ "$input" -ge "$min" ]
}

validate_interface() {
    local interface=$1
    echo "$interface" | grep -q '^[a-zA-Z][a-zA-Z0-9-]*[0-9]*$'
}

# 用户确认函数
ask_yes_no() {
    local question=$1
    local default=${2:-""}
    
    while true; do
        if [ -n "$default" ]; then
            printf "%s (y/n, 默认: %s): " "$question" "$default"
        else
            printf "%s (y/n): " "$question"
        fi
        
        read answer
        
        # 如果有默认值且用户直接回车
        if [ -z "$answer" ] && [ -n "$default" ]; then
            answer=$default
        fi
        
        case "$answer" in
            [Yy]|[Yy][Ee][Ss]) return 0 ;;
            [Nn]|[Nn][Oo]) return 1 ;;
            *) echo "请输入 y 或 n" ;;
        esac
    done
}

# 启用QoS功能
start_qos() {
    load_config
    
    # 检查接口是否存在
    if ! ip link show "$WAN_IF" >/dev/null 2>&1; then
        print_status "error" "网络接口 '$WAN_IF' 不存在"
        echo ""
        print_section "当前可用的网络接口"
        detect_interfaces
        echo ""
        print_status "info" "请使用 '$0 reconfig' 重新配置正确的接口"
        exit 1
    fi
    
    print_status "info" "启用fq_codel QoS: $WAN_IF 上传${UPLOAD_KBPS}kbps 下载${DOWNLOAD_KBPS}kbps"

    # 清理现有配置
    tc qdisc del dev $WAN_IF root 2>/dev/null
    tc qdisc del dev $WAN_IF ingress 2>/dev/null
    tc qdisc del dev ifb0 root 2>/dev/null
    ip link del ifb0 2>/dev/null

    # 配置上传队列 - 低延迟游戏优化
    tc qdisc add dev $WAN_IF root handle 1: tbf rate ${UPLOAD_KBPS}kbit latency 80ms burst 40k
    tc qdisc add dev $WAN_IF parent 1: fq_codel target 2ms interval 50ms flows 1024 quantum 300 ecn

    # 配置下载队列 - 游戏优先低延迟
    modprobe ifb
    ip link add name ifb0 type ifb 2>/dev/null
    ip link set dev ifb0 up
    tc qdisc add dev $WAN_IF ingress
    tc filter add dev $WAN_IF parent ffff: protocol all u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb0
    tc qdisc add dev ifb0 root handle 1: tbf rate ${DOWNLOAD_KBPS}kbit latency 80ms burst 50k
    tc qdisc add dev ifb0 parent 1: fq_codel target 2ms interval 50ms flows 1024 quantum 300 ecn

    print_status "success" "QoS配置完成"
}

# 停止QoS功能
stop_qos() {
    load_config
    
    print_status "info" "正在停止QoS..."
    tc qdisc del dev $WAN_IF root 2>/dev/null
    tc qdisc del dev $WAN_IF ingress 2>/dev/null
    tc qdisc del dev ifb0 root 2>/dev/null
    ip link del ifb0 2>/dev/null
    print_status "success" "QoS已停止"
}

# 重置统计数据
reset_stats() {
    load_config
    
    print_status "info" "正在重置QoS统计数据..."
    
    # 检查现有配置
    if tc qdisc show dev $WAN_IF | grep -q "qdisc tbf" && ip link show ifb0 >/dev/null 2>&1; then
        print_status "info" "检测到现有配置，重新应用以清除统计数据..."
        stop_qos
        sleep 1
        start_qos
        print_status "success" "统计数据已重置"
    else
        print_status "warning" "未检测到QoS配置，无需重置"
    fi
}

# 清屏函数
clear_screen() {
    printf '\033[2J\033[H'
}

# 格式化字节数（优化版本，不依赖bc）
format_bytes() {
    local bytes=$1
    
    if [ $bytes -gt 1073741824 ]; then
        # GB计算
        local gb=$((bytes / 1073741824))
        local remainder=$((bytes % 1073741824))
        local decimal=$((remainder * 100 / 1073741824))
        printf "%d.%02dGB" $gb $decimal
    elif [ $bytes -gt 1048576 ]; then
        # MB计算
        local mb=$((bytes / 1048576))
        local remainder=$((bytes % 1048576))
        local decimal=$((remainder * 100 / 1048576))
        printf "%d.%02dMB" $mb $decimal
    elif [ $bytes -gt 1024 ]; then
        # KB计算
        local kb=$((bytes / 1024))
        local remainder=$((bytes % 1024))
        local decimal=$((remainder * 100 / 1024))
        printf "%d.%02dKB" $kb $decimal
    else
        printf "%dB" $bytes
    fi
}

# 格式化速率
format_rate() {
    local rate=$1
    if echo "$rate" | grep -q "Mbit"; then
        echo "$rate" | sed 's/Mbit/Mbps/'
    elif echo "$rate" | grep -q "Kbit"; then
        echo "$rate" | sed 's/Kbit/Kbps/'
    else
        echo "$rate"
    fi
}

# 获取游戏队列统计信息
get_game_queue_stats() {
    local interface=$1
    local direction=$2
    
    # 获取队列统计
    local fq_stats=$(tc -s qdisc show dev $interface | grep -A 5 "qdisc fq_codel")
    local tbf_stats=$(tc -s qdisc show dev $interface | grep -A 3 "qdisc tbf")
    
    if [ -z "$fq_stats" ]; then
        print_status "error" "未找到 $direction fq_codel队列配置"
        return
    fi
    
    # 提取关键数据
    local rate=$(echo "$tbf_stats" | grep "qdisc tbf" | grep -o "rate [^ ]*" | cut -d' ' -f2)
    local sent_bytes=$(echo "$fq_stats" | grep "Sent" | grep -o "Sent [0-9]*" | cut -d' ' -f2)
    local sent_packets=$(echo "$fq_stats" | grep "Sent" | grep -o "Sent [0-9]* bytes [0-9]*" | awk '{print $4}')
    local dropped=$(echo "$fq_stats" | grep "dropped" | grep -o "dropped [0-9]*" | cut -d' ' -f2)
    local old_flows=$(echo "$fq_stats" | grep "old_flows" | grep -o "old_flows [0-9]*" | cut -d' ' -f2)
    local new_flows=$(echo "$fq_stats" | grep "new_flows" | grep -o "new_flows [0-9]*" | cut -d' ' -f2)
    
    # 默认值处理
    sent_bytes=${sent_bytes:-0}
    sent_packets=${sent_packets:-0}
    dropped=${dropped:-0}
    old_flows=${old_flows:-0}
    new_flows=${new_flows:-0}
    
    # 计算丢包率 (百分比)
    local drop_rate=0
    if [ $sent_packets -gt 0 ] && [ $dropped -gt 0 ]; then
        drop_rate=$(( (dropped * 10000) / (sent_packets + dropped) ))  # 百分比*100
    fi
    
    # 游戏性能状态判断
    local game_status=""
    local status_color=""
    local drop_rate_display=""
    
    if [ "$direction" = "上传" ]; then
        # 上传：任何丢包都是问题，直接看绝对数量
        if [ $dropped -gt 50 ]; then
            game_status="❌ 可能卡顿"
            status_color="$RED"
        elif [ $dropped -gt 10 ]; then
            game_status="⚠️  偶有延迟"
            status_color="$YELLOW"
        else
            game_status="✅ 流畅"
            status_color="$GREEN"
        fi
        drop_rate_display="累计: $dropped"
    else
        # 下载：关注丢包率，适度丢包说明QoS在工作
        if [ $drop_rate -eq 0 ]; then
            game_status="⚠️  流控未激活"
            status_color="$YELLOW"
            drop_rate_display="丢包率: 0%"
        elif [ $drop_rate -lt 100 ]; then  # <1%
            game_status="✅ 轻度流控"
            status_color="$GREEN"
            drop_rate_display=$(printf "丢包率: 0.%02d%%" $drop_rate)
        elif [ $drop_rate -lt 500 ]; then  # 1-5%
            game_status="✅ 积极流控"
            status_color="$GREEN"
            drop_rate_display=$(printf "丢包率: %d.%02d%%" $((drop_rate/100)) $((drop_rate%100)))
        elif [ $drop_rate -lt 1000 ]; then  # 5-10%
            game_status="⚠️  重度流控"
            status_color="$YELLOW"
            drop_rate_display=$(printf "丢包率: %d.%02d%%" $((drop_rate/100)) $((drop_rate%100)))
        else  # >10%
            game_status="❌ 过度丢包"
            status_color="$RED"
            drop_rate_display=$(printf "丢包率: %d.%02d%%" $((drop_rate/100)) $((drop_rate%100)))
        fi
    fi
    
    printf "${PURPLE}══════════════════════════════════════════════════════════════${NC}\n"
    printf "${PURPLE}  🎮 %s游戏队列${NC}\n" "$direction"
    printf "${PURPLE}══════════════════════════════════════════════════════════════${NC}\n"
    printf "  带宽: ${YELLOW}%s${NC} | 总流量: ${GREEN}%s${NC}\n" "$(format_rate $rate)" "$(format_bytes $sent_bytes)"
    
    if [ "$direction" = "下载" ]; then
        printf "  ${CYAN}%s${NC}\n" "$drop_rate_display"
    else
        printf "  丢包: ${RED}%s${NC}\n" "$drop_rate_display"
    fi
    
    printf "  游戏状态: ${status_color}%s${NC}\n" "$game_status"
    printf "\n"
}

# 显示监控状态说明
show_monitor_legend() {
    printf "${PURPLE}════════════════════════════════════════════════════════════════${NC}\n"
    printf "  ${GREEN}✅ 流畅/流控${NC} | ${YELLOW}⚠️ 注意${NC} | ${RED}❌ 问题${NC}\n"
    printf "  ${CYAN}💡 下载丢包率1-5%% = QoS优先保障游戏${NC}\n"
    printf "  ${YELLOW}按 Ctrl+C 退出监控${NC}\n"
}

# 检查QoS状态
check_qos_status() {
    if ! tc qdisc show dev $WAN_IF | grep -q "qdisc fq_codel"; then
        print_status "error" "游戏队列未启用"
        print_status "warning" "请先运行 $0 start 启用QoS"
        exit 1
    fi
}

# 游戏队列监控循环
main_monitor() {
    load_config
    
    # 检查是否需要重置统计数据
    if [ "$2" = "reset" ] || [ "$2" = "clean" ]; then
        print_status "info" "准备开始游戏队列监控，正在重置统计数据..."
        reset_stats
        sleep 2
    else
        print_status "info" "🎮 启动游戏队列监控..."
        sleep 1
    fi
    
    while true; do
        clear_screen
        
        printf "${GREEN}╔═══════════════════════════════════════════════════════════════╗${NC}\n"
        printf "${GREEN}║                   🎮 游戏队列监控                             ║${NC}\n"
        printf "${GREEN}║                   $(date '+%Y-%m-%d %H:%M:%S')                  ║${NC}\n"
        printf "${GREEN}╚═══════════════════════════════════════════════════════════════╝${NC}\n\n"
        
        # 检查QoS状态
        check_qos_status
        
        # 显示游戏队列统计
        get_game_queue_stats $WAN_IF "上传"
        
        if ip link show ifb0 >/dev/null 2>&1; then
            get_game_queue_stats ifb0 "下载"
        else
            print_status "error" "下载游戏队列未配置"
            echo ""
        fi
        
        # 显示状态说明
        show_monitor_legend
        
        sleep 3
    done
}

# 重新配置网络速度
reconfig_speed() {
    print_header "重新配置QoS参数"
    
    # 显示当前配置
    if [ -f "$CONFIG_FILE" ]; then
        load_config
        print_section "当前配置"
        printf "  网络接口: ${CYAN}%s${NC}\n" "$WAN_IF"
        printf "  上传速度: ${CYAN}%s Mbps${NC}\n" "$UPLOAD_MBPS"
        printf "  下载速度: ${CYAN}%s Mbps${NC}\n" "$DOWNLOAD_MBPS"
        echo ""
    fi
    
    setup_config
    
    # 如果QoS正在运行，重启以应用新配置
    if tc qdisc show dev $WAN_IF | grep -q "qdisc tbf" 2>/dev/null; then
        echo ""
        print_status "info" "检测到QoS正在运行，正在重启以应用新配置..."
        stop_qos
        sleep 1
        start_qos
    fi
}

# 显示当前配置
show_config() {
    if [ -f "$CONFIG_FILE" ]; then
        load_config
        print_header "当前QoS配置"
        
        printf "配置文件: ${CYAN}%s${NC}\n" "$CONFIG_FILE"
        printf "网络接口: ${CYAN}%s${NC}\n" "$WAN_IF"
        printf "上传速度: ${CYAN}%s Mbps${NC} (限速: ${YELLOW}%s Kbps${NC})\n" "$UPLOAD_MBPS" "$UPLOAD_KBPS"
        printf "下载速度: ${CYAN}%s Mbps${NC} (限速: ${YELLOW}%s Kbps${NC})\n" "$DOWNLOAD_MBPS" "$DOWNLOAD_KBPS"
        
        if [ "$APPLY_SYSCTL" = "yes" ]; then
            print_status "success" "内核优化已应用"
        else
            print_status "warning" "内核优化未应用"
        fi
        
        if [ -n "$CONFIG_CREATED" ]; then
            printf "创建时间: ${PURPLE}%s${NC}\n" "$CONFIG_CREATED"
        fi
    else
        print_status "error" "配置文件不存在: $CONFIG_FILE"
        print_status "info" "请先运行 '$0 start' 进行初始配置"
    fi
}

# 显示帮助信息
show_help() {
    print_header "OpenWrt fq_codel QoS 游戏优化脚本"
    
    printf "${BOLD}用法:${NC} %s [命令]\n\n" "$0"
    
    print_section "基本命令"
    printf "  ${GREEN}start${NC}        - 启用QoS\n"
    printf "  ${GREEN}stop${NC}         - 停止QoS\n"
    printf "  ${GREEN}restart${NC}      - 重启QoS\n\n"
    
    print_section "🎮 游戏监控"
    printf "  ${GREEN}monitor${NC}      - 游戏队列实时监控\n"
    printf "  ${GREEN}monitor reset${NC}- 重置数据后监控\n\n"
    
    print_section "配置管理"
    printf "  ${GREEN}config${NC}       - 显示当前配置\n"
    printf "  ${GREEN}reconfig${NC}     - 重新配置网速和接口\n"
    printf "  ${GREEN}reset${NC}        - 重置统计数据\n"
    printf "  ${GREEN}sysctl${NC}       - 应用网络内核优化参数\n\n"
    
    print_section "示例"
    printf "  ${CYAN}%s start${NC}     - 启用游戏优化QoS\n" "$0"
    printf "  ${CYAN}%s monitor${NC}   - 🎮 实时监控游戏队列\n" "$0"
}

# 参数处理
case "$1" in
    "start")
        start_qos
        echo ""
        print_section "🎮 游戏优化命令"
        print_status "info" "游戏队列监控: $0 monitor"
        print_status "info" "停止QoS:      $0 stop"
        print_status "info" "查看配置:     $0 config"
        ;;
    "stop")
        stop_qos
        ;;
    "restart")
        stop_qos
        print_status "info" "等待1秒..."
        sleep 1
        start_qos
        ;;
    "monitor")
        main_monitor "$@"
        ;;
    "reset")
        reset_stats
        ;;
    "config")
        show_config
        ;;
    "reconfig")
        reconfig_speed
        ;;
    "sysctl")
        print_status "info" "正在应用推荐的网络内核优化参数..."
        APPLY_SYSCTL="yes"
        apply_sysctl_optimizations
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        print_status "error" "未知命令: $1"
        print_status "info" "使用 '$0 help' 查看帮助信息"
        exit 1
        ;;
esac
