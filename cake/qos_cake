#!/bin/sh
# CAKE QoS 简化版 - 专为 PPPoE 优化

# 配置文件路径
CONFIG_FILE="/etc/config/qos_cake_simple"

# PPPoE 接口检测
detect_pppoe_interface() {
    # 优先检测 PPPoE 接口
    local pppoe_if=""
    
    if [ -d "/sys/class/net" ]; then
        for iface in /sys/class/net/*; do
            local if_name=$(basename "$iface")
            case "$if_name" in
                pppoe-wan|ppp0|wan) 
                    if ip link show "$if_name" >/dev/null 2>&1; then
                        pppoe_if="$if_name"
                        break
                    fi
                    ;;
            esac
        done
    fi
    
    # 如果没找到，使用默认
    echo "${pppoe_if:-pppoe-wan}"
}

# 读取配置
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        . "$CONFIG_FILE"
    else
        setup_config
    fi
    
    # 验证数值
    case "$UPLOAD_MBPS" in ''|*[!0-9]*) UPLOAD_MBPS=10 ;; esac
    case "$DOWNLOAD_MBPS" in ''|*[!0-9]*) DOWNLOAD_MBPS=50 ;; esac
    
    # CAKE 自动调优，只需 95% 带宽即可
    UPLOAD_KBPS=$(( UPLOAD_MBPS * 950 ))
    DOWNLOAD_KBPS=$(( DOWNLOAD_MBPS * 950 ))
    
    # PPPoE 固定参数
    WAN_IF="${WAN_IF:-$(detect_pppoe_interface)}"
}

# 简化配置向导
setup_config() {
    printf "\n${GREEN}🍰 CAKE QoS 简化配置 (PPPoE 专用)${NC}\n"
    printf "${PURPLE}═══════════════════════════════════════${NC}\n\n"
    
    # 自动检测 PPPoE 接口
    WAN_IF=$(detect_pppoe_interface)
    printf "检测到 PPPoE 接口: ${CYAN}%s${NC}\n" "$WAN_IF"
    
    # 询问接口确认
    printf "确认使用此接口吗? (直接回车确认，或输入其他接口名): "
    read input_interface
    if [ -n "$input_interface" ]; then
        WAN_IF="$input_interface"
    fi
    
    echo ""
    
    # 询问上传速度
    while true; do
        printf "请输入实际上传速度 (Mbps): "
        read UPLOAD_MBPS
        if echo "$UPLOAD_MBPS" | grep -q '^[0-9]\+$' && [ "$UPLOAD_MBPS" -gt 0 ]; then
            break
        else
            printf "${RED}请输入有效数字${NC}\n"
        fi
    done
    
    # 询问下载速度
    while true; do
        printf "请输入实际下载速度 (Mbps): "
        read DOWNLOAD_MBPS
        if echo "$DOWNLOAD_MBPS" | grep -q '^[0-9]\+$' && [ "$DOWNLOAD_MBPS" -gt 0 ]; then
            break
        else
            printf "${RED}请输入有效数字${NC}\n"
        fi
    done
    
    # 显示配置总结
    echo ""
    printf "${PURPLE}配置总结${NC}\n"
    printf "接口: ${CYAN}%s${NC} (PPPoE)\n" "$WAN_IF"
    printf "上传: ${YELLOW}%s Mbps${NC} -> CAKE限速: ${GREEN}%s Kbps${NC}\n" "$UPLOAD_MBPS" "$((UPLOAD_MBPS * 950))"
    printf "下载: ${YELLOW}%s Mbps${NC} -> CAKE限速: ${GREEN}%s Kbps${NC}\n" "$DOWNLOAD_MBPS" "$((DOWNLOAD_MBPS * 950))"
    printf "特性: ${CYAN}DiffServ4 游戏优先级 + PPPoE 优化${NC}\n"
    echo ""
    
    printf "确认保存配置? (y/n): "
    read confirm
    case "$confirm" in
        [Yy]|[Yy][Ee][Ss]|"") 
            save_config
            printf "${GREEN}✅ 配置已保存${NC}\n"
            ;;
        *)
            printf "${RED}❌ 配置已取消${NC}\n"
            exit 0
            ;;
    esac
}

# 保存配置
save_config() {
    mkdir -p "$(dirname "$CONFIG_FILE")"
    cat > "$CONFIG_FILE" << EOF
# CAKE QoS 简化配置 - PPPoE 专用
# 生成时间: $(date)

WAN_IF="$WAN_IF"
UPLOAD_MBPS=$UPLOAD_MBPS
DOWNLOAD_MBPS=$DOWNLOAD_MBPS
EOF
    chmod 644 "$CONFIG_FILE"
}

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# 检查 CAKE 支持
check_cake() {
    if ! lsmod | grep -q "sch_cake" 2>/dev/null; then
        printf "${YELLOW}正在加载 CAKE 模块...${NC}\n"
        if ! modprobe sch_cake 2>/dev/null; then
            printf "${RED}❌ CAKE 模块加载失败${NC}\n"
            printf "请确保内核支持 CAKE 或安装相关模块\n"
            exit 1
        fi
    fi
    printf "${GREEN}✅ CAKE 支持已确认${NC}\n"
}

# 启动 CAKE QoS
start_qos() {
    load_config
    check_cake
    
    # 检查接口
    if ! ip link show "$WAN_IF" >/dev/null 2>&1; then
        printf "${RED}❌ 接口 '$WAN_IF' 不存在${NC}\n"
        printf "请检查 PPPoE 连接状态或重新配置\n"
        exit 1
    fi
    
    printf "${GREEN}🍰 启动 CAKE QoS (PPPoE 优化)${NC}\n"
    printf "接口: %s | 上传: %s Kbps | 下载: %s Kbps\n" "$WAN_IF" "$UPLOAD_KBPS" "$DOWNLOAD_KBPS"
    
    # 清理现有配置
    tc qdisc del dev "$WAN_IF" root 2>/dev/null
    tc qdisc del dev "$WAN_IF" ingress 2>/dev/null
    tc qdisc del dev ifb0 root 2>/dev/null
    ip link del ifb0 2>/dev/null
    
    # 上传队列 - CAKE 自动调优，只需核心参数
    tc qdisc add dev "$WAN_IF" root cake \
        bandwidth "${UPLOAD_KBPS}kbit" \
        diffserv4 \
        nat \
        ack-filter \
        overhead 18
    
    # 下载队列 - 使用 IFB
    modprobe ifb
    ip link add name ifb0 type ifb 2>/dev/null
    ip link set dev ifb0 up
    tc qdisc add dev "$WAN_IF" ingress
    tc filter add dev "$WAN_IF" parent ffff: protocol all u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb0
    
    tc qdisc add dev ifb0 root cake \
        bandwidth "${DOWNLOAD_KBPS}kbit" \
        diffserv4 \
        nat \
        ingress \
        overhead 18
    
    printf "${GREEN}✅ CAKE QoS 启动完成${NC}\n"
    printf "${CYAN}🎮 游戏流量将自动获得最高优先级${NC}\n"
}

# 停止 QoS
stop_qos() {
    load_config
    printf "${YELLOW}正在停止 CAKE QoS...${NC}\n"
    
    tc qdisc del dev "$WAN_IF" root 2>/dev/null
    tc qdisc del dev "$WAN_IF" ingress 2>/dev/null
    tc qdisc del dev ifb0 root 2>/dev/null
    ip link del ifb0 2>/dev/null
    
    printf "${GREEN}✅ CAKE QoS 已停止${NC}\n"
}

# 显示状态
show_status() {
    load_config
    
    printf "${GREEN}🍰 CAKE QoS 状态${NC}\n"
    printf "${PURPLE}═══════════════════════════════════════${NC}\n"
    
    # 检查是否运行
    if tc qdisc show dev "$WAN_IF" | grep -q "qdisc cake"; then
        printf "状态: ${GREEN}运行中${NC}\n"
        
        # 显示统计
        printf "\n${CYAN}上传队列统计:${NC}\n"
        tc -s qdisc show dev "$WAN_IF" | grep -A 8 "qdisc cake"
        
        if ip link show ifb0 >/dev/null 2>&1; then
            printf "\n${CYAN}下载队列统计:${NC}\n"
            tc -s qdisc show dev ifb0 | grep -A 8 "qdisc cake"
        fi
    else
        printf "状态: ${RED}未运行${NC}\n"
    fi
    
    printf "\n${CYAN}当前配置:${NC}\n"
    printf "接口: %s (PPPoE)\n" "$WAN_IF"
    printf "上传: %s Mbps (%s Kbps)\n" "$UPLOAD_MBPS" "$UPLOAD_KBPS"
    printf "下载: %s Mbps (%s Kbps)\n" "$DOWNLOAD_MBPS" "$DOWNLOAD_KBPS"
}

# 显示帮助
show_help() {
    printf "${GREEN}🍰 CAKE QoS 简化版 - PPPoE 专用${NC}\n"
    printf "${PURPLE}═══════════════════════════════════════${NC}\n\n"
    
    printf "${CYAN}命令:${NC}\n"
    printf "  start    - 启动 CAKE QoS\n"
    printf "  stop     - 停止 CAKE QoS\n"
    printf "  restart  - 重启 CAKE QoS\n"
    printf "  status   - 显示运行状态\n"
    printf "  config   - 重新配置\n"
    printf "  help     - 显示帮助\n\n"
    
    printf "${CYAN}特性:${NC}\n"
    printf "  ✅ 专为 PPPoE 连接优化\n"
    printf "  ✅ CAKE 算法自动调优\n"
    printf "  ✅ DiffServ4 游戏优先级\n"
    printf "  ✅ 智能 ACK 过滤\n"
    printf "  ✅ 自动 NAT 检测\n\n"
    
    printf "${CYAN}使用方法:${NC}\n"
    printf "  1. 运行 './qos_cake_simple start' 进行配置\n"
    printf "  2. 输入 PPPoE 接口和实际带宽\n"
    printf "  3. CAKE 会自动处理其他所有参数\n"
}

# 主程序
case "$1" in
    "start")
        start_qos
        ;;
    "stop")
        stop_qos
        ;;
    "restart")
        stop_qos
        sleep 1
        start_qos
        ;;
    "status")
        show_status
        ;;
    "config")
        setup_config
        ;;
    "help"|"-h"|"--help"|"")
        show_help
        ;;
    *)
        printf "${RED}未知命令: $1${NC}\n"
        printf "使用 '$0 help' 查看帮助\n"
        exit 1
        ;;
esac
